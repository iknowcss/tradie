import path from 'path';
import chalk from 'chalk';
import initScripts from '../lib/scripts/init';
import initStyles from '../lib/styles/init';
import createFile from '../lib/createFile';
import createJsonFile from '../lib/createJsonFile';

export const name = 'init';
export const desc = 'Create a new project';

export function hint(yargs) {
  return yargs.option('f', {
    alias: 'force',
    default: false
  });
}

export function exec({args, config}) {

  function createIgnoreFile(config) {
    return createFile(
      '.gitignore',
      `npm-debug.log\nnode_modules\n${path.join(config.scripts.dest, '*')}\n${path.join(config.styles.dest, '*')}`
    );
  }

  function createHtmlFile() {
    return createFile(
      'index.html',
      `<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Tradie Project</title>
  <link rel="stylesheet" href="dist/index.css"/>
</head>
<body>
  <h4>Tradie Project</h4>
  <p>This project has been generated by <code>tradie</code>.</p>
  <script src="dist/index.js"></script>
</body>
</html>
`
    );
  }

  function createTradieConfig() {
    const json = {};
    return createJsonFile('.tradierc', json);
  }

  function createPackageConfig() {
    const version = require('../../package.json').version;

    const json = {
      name: path.basename(process.cwd()),
      private: true,
      devDependencies: {
        tradie: `^${version}`
      },
      scripts: {
        build: 'tradie build',
        test: 'tradie test'
      }
    };

    return createJsonFile('package.json', json);
  }

  if (!args.force) {
    console.log(chalk.yellow('Specify the --force flag if you wish to write files to disk. This action will not be reversable!'));
    //TODO: check no files exist already
    return Promise.resolve(-1);
  }

  return Promise.all([
    createIgnoreFile(config),
    createTradieConfig(),
    createPackageConfig(),
    createHtmlFile(),
    initScripts(config.scripts),
    initStyles(config.styles)
  ])
    .then(() => console.log(chalk.green(' => project created')))
  ;

}
